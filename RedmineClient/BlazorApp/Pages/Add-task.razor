@page "/add-task"
@using BlazorApp.Models
@inject HttpClient Http

<PageTitle>Add Task</PageTitle>

<h3>Add New Task</h3>

@if (managers == null || developers == null)
{
    <p><em>Loading managers and developers...</em></p>
}
else
{
    <EditForm Model="@taskModel" OnValidSubmit="HandleValidSubmit">
        <DataAnnotationsValidator />
        <div class="mb-3">
            <label for="taskName" class="form-label">Task Name</label>
            <InputText id="taskName" class="form-control" @bind-Value="taskModel.Name" />
        </div>

        <div class="mb-3">
            <label for="taskDescription" class="form-label">Description</label>
            <InputTextArea id="taskDescription" class="form-control" @bind-Value="taskModel.Description" />
        </div>

        <div class="mb-3">
            <label for="managerSelect" class="form-label">Select Manager</label>
            <InputSelect id="managerSelect" class="form-control" @bind-Value="taskModel.UserId">
                @foreach (var manager in managers)
                {
                    <option value="@manager.ID">@manager.Name</option>
                }
            </InputSelect>
        </div>

        <div class="mb-3">
            <label for="developerSelect" class="form-label">Select Developer</label>
            <InputSelect id="developerSelect" class="form-control" @bind-Value="selectedDeveloperId">
                @foreach (var developer in developers)
                {
                    <option value="@developer.Id">@developer.Name</option>
                }
            </InputSelect>
        </div>

        <button type="submit" class="btn btn-primary">Submit</button>
    </EditForm>
}

@code {
    private TaskModel taskModel = new();
    private int selectedDeveloperId;
    private ManagerModel[]? managers;
    private DeveloperModel[]? developers;

    protected override async Task OnInitializedAsync()
    {
        managers = await Http.GetFromJsonAsync<ManagerModel[]>("api/managers");
        developers = await Http.GetFromJsonAsync<DeveloperModel[]>("api/developers");
    }

    private async Task HandleValidSubmit()
    {
        try
        {
            var response = await Http.PostAsJsonAsync("api/tasks", taskModel);

            if (!response.IsSuccessStatusCode)
            {
                // If not successful, throw an exception with the status code and reason.
                throw new ApplicationException($"Error: {response.StatusCode}, {await response.Content.ReadAsStringAsync()}");
            }

            // On success, reset form or navigate.
            taskModel = new TaskModel();
            
        }
        catch (Exception ex)
        {
            // Handle any other exceptions here.
            throw new ApplicationException($"Submission error: {ex.Message}");
        }
    }
}

@page "/"
@using BlazorApp.Models
@inject HttpClient Http

<PageTitle>Home</PageTitle>

<h1>Hello, world!</h1>

Welcome to your new app.

@if (loading)
{
    <p><em>Loading...</em></p>
}
else
{
    @if (managers == null)
    {
        <p>No managers found.</p>
    }
    else
    {
        <h2>Managers</h2>
        <ul>
            @foreach (var manager in managers)
            {
                <li>@manager.Name (@manager.Email)</li>
            }
        </ul>
    }

    @if (projects == null)
    {
        <p>No projects found.</p>
    }
    else
    {
        <h2>Projects</h2>
        <ul>
            @foreach (var project in projects)
            {
                <li>@project.Name</li>
                <li>Description: @project.Description</li>
                <li>Type: @project.TypeName</li>
            }
        </ul>
    }

    @if (tasks == null)
    {
        <p>No tasks found.</p>
    }
    else
    {
        <h2>Tasks</h2>
        <ul>
            @foreach (var task in tasks)
            {
                <li>@task.Name</li>
                <li>Description: @task.Description</li>
                <li>Project: @task.ProjectName</li>
                <li>Manager: @task.ManagerName</li>
                <li>Deadline: @task.DateTime</li>
            }
        </ul>
    }
}

@code {
    private ManagerModel[]? managers;
    private ProjectModel[]? projects;
    private TaskModel[]? tasks;
    private bool loading = true;

    protected override async Task OnInitializedAsync()
    {
        try
        {
            // Retrieve data from APIs
            managers = await Http.GetFromJsonAsync<ManagerModel[]>("api/managers");
            projects = await Http.GetFromJsonAsync<ProjectModel[]>("api/projects");
            tasks = await Http.GetFromJsonAsync<TaskModel[]>("api/tasks");
            // Retrieve data from APIs By Id
            public async Task<ManagerModel> GetManagerByIdAsync(string id)
            {   return await Http.GetFromJsonAsync<ManagerModel>($"api/Managers/{id}"); }
            public async Task<ProjectModel> GetProjectByIdAsync(string id)
            {   return await Http.GetFromJsonAsync<ProjectModel>($"api/Projects/{id}"); }
            public async Task<TaskModel[]> GetTasksByProjectIdAsync(string projectId)
            {   return await Http.GetFromJsonAsync<TaskModel[]>($"api/Tasks/project/{projectId}"); }
            public async Task<TaskModel[]> GetTasksByManagerIdAsync(string managerId)
            {   return await Http.GetFromJsonAsync<TaskModel[]>($"api/Tasks/manager/{managerId}"); }
            // Send data to API
            public async Task CreateTaskAsync(TaskModel newTask)
            {
                var response = await Http.PostAsJsonAsync("api/Tasks", newTask);
                if (!response.IsSuccessStatusCode){
                    throw new ApplicationException("Failed to create task");
                }
}
        }
        catch (Exception ex)
        {
            // This will trigger Blazor's built-in error handling mechanism
            throw new ApplicationException($"Error retrieving API data: {ex.Message}");
        }
        finally
        {
            // Ensure loading is set to false regardless of success or failure
            loading = false;
        }
    }
}
@page "/"
@using BlazorApp.Models
@inject HttpClient Http

<PageTitle>Home</PageTitle>

<h1>Hello, world!</h1>

Welcome to your new app.

@if (loading)
{
    <p><em>Loading...</em></p>
}
else
{
    @if (managers == null)
    {
        <p>No managers found.</p>
    }
    else
    {
        
        <h2>Managers</h2>
        <ul>
            @foreach (var manager in managers)
            {
                <li>@manager.Name (@manager.Email)</li>
            }
        </ul>
    }

    @if (projects == null)
    {
        <p>No projects found.</p>
    }
    else
    {
        <h2>Projects</h2>
        <ul>
            @foreach (var project in projects)
            {
                <li>@project.Name</li>
                <li>Description: @project.Description</li>
                <li>Type: @project.TypeName</li>
            }
        </ul>
    }

    @if (tasks == null)
    {
        <p>No tasks found.</p>
    }
    else
    {
        <h2>Tasks</h2>
        <ul>
            @foreach (var task in tasks)
            {
                <li>@task.Name</li>
                <li>Description: @task.Description</li>
                <li>Project: @task.ProjectName</li>
                <li>Manager: @task.ManagerName</li>
                <li>Deadline: @task.DateTime</li>
            }
        </ul>
    }
    <h3>Task Search</h3>
    <input @bind="taskId" type="number" placeholder="Enter Task ID..." />
    <button @onclick="SearchTask">Search</button>
    @if(tasks != null && taskId != 0)
    {
        <h2>Task</h2>
        <ul>
            @foreach (var task in tasks)
            {
                <li>@task.Name</li>
                <li>Description: @task.Description</li>
                <li>Project: @task.ProjectName</li>
                <li>Manager: @task.ManagerName</li>
                <li>Deadline: @task.DateTime</li>
            }
        </ul>
    }
    <h3>Manager Search</h3>
    <input @bind="managerId" type="number" placeholder="Enter Task ID..." />
    <button @onclick="SearchManager">Search</button>
    @if(managers != null && managerId != 0)
    {
    <h2>Manager</h2>
        <ul>
            @foreach (var manager in managers)
            {   <li>@manager.Name (@manager.Email)</li> }
        </ul>
    }
    <h3>Project Search</h3>
    <input @bind="projectId" type="number" placeholder="Enter Task ID..." />
    <button @onclick="SearchProject">Search</button>
    @if(projects != null && projectId != 0)
    {
        <h2>Projects</h2>
        <ul>
            @foreach (var project in projects)
            {
                <li>@project.Name</li>
                <li>Description: @project.Description</li>
                <li>Type: @project.TypeName</li>
            }
        </ul>
    }
    <h3>Search Tasks by Project ID</h3>
<input @bind="projectId" type="number" placeholder="Enter Project ID..." />
<button @onclick="SearchTasksByProjectId">Search</button>

    @if(projectTasks != null && projectId != 0)
    {
        <h2>Tasks for Project @projectId</h2>
        <ul>
            @foreach (var task in projectTasks)
            {
                <li>@task.Name</li>
                <li>Description: @task.Description</li>
                <li>Deadline: @task.DateTime)</li>
                
            }
        </ul>
    }

    <h3>Search Tasks by Manager ID</h3>
    <input @bind="managerId" type="number" placeholder="Enter Manager ID..." />
    <button @onclick="SearchTasksByManagerId">Search</button>

    @if(managerTasks != null && managerId != 0)
    {
        <h2>Tasks for Manager @managerId</h2>
        <ul>
            @foreach (var task in managerTasks)
            {
                <li>@task.Name</li>
                <li>Description: @task.Description</li>
                <li>Deadline: @task.DateTime)</li>
                
            }
        </ul>
    }

}

@code {
    private int taskId;
    private int managerId;
    private int projectId;

    private ManagerModel[]? managers;
    private ProjectModel[]? projects;
    private TaskModel[]? tasks;

    private TaskModel[]? projectTasks;
    private TaskModel[]? managerTasks;

    private bool loading = true;

    protected override async Task OnInitializedAsync()
    {
        try
        {
            // Retrieve data from APIs
            managers = await Http.GetFromJsonAsync<ManagerModel[]>("api/managers");
            projects = await Http.GetFromJsonAsync<ProjectModel[]>("api/projects");
            tasks = await Http.GetFromJsonAsync<TaskModel[]>("api/tasks");

            // Send data to API
        }
        catch (Exception ex)
        {
            // This will trigger Blazor's built-in error handling mechanism
            throw new ApplicationException($"Error retrieving API data: {ex.Message}");
        }
        finally
        {
            // Ensure loading is set to false regardless of success or failure
            loading = false;
        }
    
    }
     // Retrieve data from APIs By Id
    private async Task SearchTask()
    {
        tasks = await Http.GetFromJsonAsync<TaskModel[]>($"api/Tasks/{taskId}");
    }
     private async Task SearchManager()
    {
        managers = await Http.GetFromJsonAsync<ManagerModel[]>($"api/Managers/{managerId}");
    }
     private async Task SearchProject()
    {
        projects = await Http.GetFromJsonAsync<ProjectModel[]>($"api/Projects/{projectId}");
    }
      // Method to search tasks by project ID
    private async Task SearchTasksByProjectId()
    {
        projectTasks = await Http.GetFromJsonAsync<TaskModel[]>($"api/Tasks/project/{projectId}");
    }
    // Method to search tasks by manager ID
    private async Task SearchTasksByManagerId()
    {
        managerTasks = await Http.GetFromJsonAsync<TaskModel[]>($"api/Tasks/manager/{managerId}");
    }
}
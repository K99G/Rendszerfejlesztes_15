@page "/projects"
@using BlazorClient.Models
@using System.Text.Json
@using Microsoft.Extensions.Logging;
@inject HttpClient Http
@inject ILogger<Projects> Logger // Assuming you have ILogger set up

<PageTitle>Projects</PageTitle>

        <h3>Projects</h3>
        @if (projects == null && !loadingFailed)
        {
            <p><em>Loading...</em></p>
        }
        else if (loadingFailed)
        {
            <p><em>Failed to load projects. Please try again later.</em></p>
            @if (!string.IsNullOrWhiteSpace(errorMessage))
            {
                <p class="text-danger">Error: @errorMessage</p>
            }
        }
        else
        {
            <ul>
            @foreach (var project in projects)
            {
                <li>@project.Name - @project.Description</li>
            }
            </ul>
        }

        @code {
            private List<ProjectDTO>? projects;
            private bool loadingFailed = false;
            private string? errorMessage;

            protected override async Task OnInitializedAsync()
            {
                try
                {
                    projects = await Http.GetFromJsonAsync<List<ProjectDTO>>("/api/Projects");
                }
                catch (HttpRequestException)
                {
                    errorMessage = "There was a problem connecting to the server.";
                    loadingFailed = true;
                }
                catch (NotSupportedException)
                {
                    errorMessage = "Server returned an invalid response.";
                    loadingFailed = true;
                }
                catch (JsonException)
                {
                    errorMessage = "Error processing server response.";
                    loadingFailed = true;
                }
                catch (Exception)
                {
                    errorMessage = "An unexpected error occurred.";
                    loadingFailed = true;
                }
            }
        }
    }
}